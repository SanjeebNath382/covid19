{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","spinner/Spinner.js","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","static/image.png"],"names":["module","exports","Cards","props","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","data","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","country","a","changeableurl","axios","get","newData","fetchDailyData","modifiedData","map","dailydata","total","date","reportDate","fetchCountries","countries","name","Chart","useState","dailyData","setdailyData","useEffect","fetchapi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedcountries","setfetchedcountries","FormControl","NativeSelect","onChange","e","target","defaultValue","i","key","spinner","class","role","style","width","height","App","state","fetchedData","setState","res","this","src","img","alt","image","Object","keys","constructor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2fcf42e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1FdRr\",\"card\":\"Cards_card__2RW63\",\"infected\":\"Cards_infected__2shje\",\"recovered\":\"Cards_recovered__R0Zpe\",\"deaths\":\"Cards_deaths__1vXkt\"};","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nexport default function Cards(props) {\r\n   \r\n    \r\n    console.log(props)\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0} end={props.data.confirmed.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                        {new Date(props.data.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" >\r\n                           Active Cases\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0} end={props.data.recovered.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                        {new Date(props.data.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" >\r\n                           Number of recovered\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0} end={props.data.deaths.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                        {new Date(props.data.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" >\r\n                           Number of deaths\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\n\r\nexport const fetchData =async (country)=>{\r\n        let changeableurl= url;\r\n\r\n        if(country){\r\n            changeableurl = `${url}/countries/${country}`\r\n        }\r\n\r\n        try {\r\n            const {data}= await axios.get(changeableurl);\r\n\r\n            const newData={\r\n                confirmed:data.confirmed,\r\n                recovered:data.recovered,\r\n                deaths:data.deaths,\r\n                lastUpdate: data.lastUpdate\r\n\r\n            }\r\n            return newData\r\n        } catch (error) {\r\n            return error\r\n        }\r\n}\r\n\r\nexport const fetchDailyData = async ()=>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        const modifiedData= data.map((dailydata)=>({\r\n            confirmed: dailydata.confirmed.total,\r\n            deaths: dailydata.deaths.total,\r\n            date: dailydata.reportDate,\r\n        }))\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nexport const fetchCountries = async()=>{\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n        \r\n        return countries.map((country)=> country.name);\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\n","import React,{useState,useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport styles from \"./Chart.module.css\"\r\n\r\nexport default function Chart({data,country}) {\r\n    const [dailyData, setdailyData] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchapi= async ()=>{\r\n            setdailyData( await fetchDailyData())\r\n        }\r\n        fetchapi();\r\n    },[])\r\n    \r\n    const lineChart=(\r\n       dailyData.length? <Line data={{\r\n            labels: dailyData.map(({date})=> date),\r\n            datasets:[{\r\n                data: dailyData.map(({confirmed})=> confirmed),\r\n                label: \"Infected\",\r\n                borderColor: \"#3333ff\",\r\n                fill:true,\r\n            },{\r\n                data: dailyData.map(({deaths})=> deaths),\r\n                label: \"Deaths\",\r\n                borderColor: \"red\",\r\n                backgroundColor:\"rgba(255,0,0,0.5)\",\r\n                fill:true,\r\n            }]\r\n        }}\r\n        />:null\r\n    )\r\n    console.log(data);\r\n    const barChart =(\r\n        data.confirmed?(\r\n            <Bar \r\n                data={{\r\n                    labels:['Infected','Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label:'People',\r\n                        backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n                        data:[data.confirmed.value,data.recovered.value,data.deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display:false},\r\n                    title: {display:true,text:`Current State in ${country}`}\r\n                }}\r\n            />\r\n        ): null\r\n    )\r\n        \r\n    \r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n            {country?barChart:lineChart}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React,{useState,useEffect} from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core'\r\nimport {fetchCountries} from '../../api'\r\nimport styles from './CountryPicker.module.css'\r\n\r\nexport default function CountryPicker({handleCountryChange}) {\r\n    const [fetchedcountries, setfetchedcountries] = useState([]);\r\n    useEffect(\r\n        ()=>{\r\n            const fetchapi = async()=>{\r\n                setfetchedcountries(await fetchCountries()) \r\n            }\r\n            fetchapi()\r\n        },[setfetchedcountries]\r\n        \r\n    )\r\n    return (\r\n        <>\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"\" defaultValue>Global</option>\r\n                {fetchedcountries.map((country,i)=> <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function spinner() {\r\n    return (\r\n        <>\r\n        <div class=\"d-flex justify-content-center\">\r\n        <div class=\"d-flex justify-content-center\">\r\n<div class=\"spinner-grow text-primary\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-secondary\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-success\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-danger\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-warning\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-info\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-light\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"spinner-grow text-dark\" role=\"status\" style={{width:\"10rem\",height:\"10rem\"}}>\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n</div>\r\n</div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport Cards from \"./components/Cards/Cards\"\nimport Chart from \"./components/Chart/Chart\"\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport {fetchData} from './api'\nimport Spinner from './spinner/Spinner'\nimport styles from './App.module.css'\nimport img from './static/image.png'\nexport default class App extends Component {\n  state={\n    data:{},\n    country:\"\"\n  }\n  async componentDidMount() {\n   const res= await fetchData();\n    this.setState({data:res});\n   \n  }\n  handleCountryChange=async (country)=>{\n     const fetchedData= await fetchData(country);\n     this.setState({data:fetchedData,country:country})\n  }\n  //console.log()\n\n  render() {\n  \n    return (\n      <>\n      <div className={styles.container}>\n      <img src={img} alt=\"covid19\" className={styles.image}></img>\n      {console.log(Object.keys(this.state.data).length === 0 && this.state.data.constructor === Object)}\n      {Object.keys(this.state.data).length === 0 && this.state.data.constructor === Object?<Spinner />:<Cards data={this.state.data}/>}\n     {Object.keys(this.state.data).length === 0 && this.state.data.constructor === Object?<Spinner />:<CountryPicker handleCountryChange={this.handleCountryChange}/>} \n      <Chart data={this.state.data} country={this.state.country}/>\n        \n      </div>\n      \n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__3OZXl\",\"container\":\"App_container__26OvS\",\"image\":\"App_image__xhLUt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2SnNx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__281rh\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}